#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M√≥dulo de restauraci√≥n de backup
Permite seleccionar un ZIP de backup y restaurar la base de datos completa
"""

import streamlit as st
import zipfile
import tempfile
import os
from sqlalchemy import create_engine, text
import shutil
import config

def restore_backup_page():
    """P√°gina principal de restauraci√≥n de backup"""
    
    st.title(config.TITULO_APP)
    st.header("üîÑ Restaurar Base de Datos")
    
    # Verificaci√≥n de configuraci√≥n
    try:
        db_url = st.secrets["DB_URL"]
        st.success("‚úÖ Configuraci√≥n de base de datos encontrada")
    except:
        st.error("‚ùå No se encontr√≥ DB_URL en secrets.toml")
        st.code("""
# Agrega esto a .streamlit/secrets.toml
DB_URL = "postgresql://usuario:contrase√±a@servidor:puerto/basededatos"
        """)
        return
    
    # Advertencia importante
    st.warning("""
    ‚ö†Ô∏è **ADVERTENCIA IMPORTANTE:**
    
    Este proceso:
    - **ELIMINAR√Å** todos los datos actuales de la base de datos
    - **RECREAR√Å** la estructura de tablas
    - **INSERTAR√Å** los datos del backup
    
    **Aseg√∫rese de haber hecho un backup actual antes de proceder.**
    """)
    
    # Selector de archivo
    st.markdown("### üìÅ Seleccionar Archivo de Backup")
    
    uploaded_file = st.file_uploader(
        "Sube el archivo ZIP de backup",
        type=['zip'],
        help="Archivo generado por la funci√≥n de backup"
    )
    
    if uploaded_file is not None:
        # Mostrar informaci√≥n del archivo
        file_size = len(uploaded_file.getvalue()) / 1024 / 1024  # MB
        st.info(f"üì¶ Archivo cargado: **{uploaded_file.name}** ({file_size:.2f} MB)")
        
        # Vista previa del contenido
        with st.expander("üîç Vista Previa del Contenido del ZIP"):
            try:
                with zipfile.ZipFile(uploaded_file, 'r') as zip_ref:
                    files_list = zip_ref.namelist()
                    
                    st.markdown("**Archivos encontrados:**")
                    for file in files_list:
                        if file.endswith('.sql'):
                            st.markdown(f"- üìã `{file}`")
                        elif file.endswith('.db'):
                            st.markdown(f"- üóÑÔ∏è `{file}`")
                        elif file.endswith('.py'):
                            st.markdown(f"- üêç `{file}`")
                        else:
                            st.markdown(f"- üìÑ `{file}`")
                    
                    # Verificar archivos requeridos
                    required_files = ['01_structure.sql', '02_data.sql']
                    missing_files = [f for f in required_files if f not in files_list]
                    
                    if missing_files:
                        st.error(f"‚ùå Archivos faltantes: {', '.join(missing_files)}")
                        st.stop()
                    else:
                        st.success("‚úÖ Todos los archivos requeridos est√°n presentes")
            
            except Exception as e:
                st.error(f"‚ùå Error leyendo el archivo ZIP: {str(e)}")
                st.stop()
        
        st.markdown("---")
        
        # Opciones de restauraci√≥n
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### ‚öôÔ∏è Opciones de Restauraci√≥n")
            
            restore_option = st.radio(
                "Seleccione el m√©todo:",
                ["Restauraci√≥n Completa (Recomendado)", "Solo Estructura", "Solo Datos"],
                help="Completa: borra todo y restaura. Estructura: solo crea tablas. Datos: solo inserta datos."
            )
            
            confirm_delete = st.checkbox(
                "‚ö†Ô∏è Confirmo que deseo eliminar todos los datos actuales",
                help="Debe marcar esta casilla para proceder"
            )
        
        with col2:
            st.markdown("### üìä Informaci√≥n")
            st.info("""
            **Proceso de Restauraci√≥n:**
            
            1. Extracci√≥n del ZIP
            2. Validaci√≥n de archivos
            3. Eliminaci√≥n de datos actuales
            4. Creaci√≥n de estructura
            5. Inserci√≥n de datos
            6. Verificaci√≥n final
            """)
        
        # Bot√≥n de restauraci√≥n
        st.markdown("---")
        
        if not confirm_delete:
            st.error("‚ö†Ô∏è Debe confirmar la eliminaci√≥n de datos para continuar")
        else:
            if st.button("üöÄ INICIAR RESTAURACI√ìN", type="primary", use_container_width=True):
                restore_database(uploaded_file, db_url, restore_option)

def restore_database(uploaded_file, db_url, restore_option):
    """Ejecuta el proceso de restauraci√≥n"""
    
    progress = st.progress(0)
    status = st.empty()
    
    try:
        # Paso 1: Extraer ZIP
        status.text("üì¶ Extrayendo archivos del backup...")
        progress.progress(10)
        
        # Crear directorio temporal
        temp_dir = tempfile.mkdtemp()
        extract_dir = os.path.join(temp_dir, "backup_extract")
        os.makedirs(extract_dir)
        
        # Extraer ZIP
        uploaded_file.seek(0)  # Volver al inicio del archivo
        with zipfile.ZipFile(uploaded_file, 'r') as zip_ref:
            zip_ref.extractall(extract_dir)
        
        st.success("‚úÖ Archivos extra√≠dos correctamente")
        progress.progress(20)
        
        # Paso 2: Localizar archivos SQL
        status.text("üîç Localizando archivos SQL...")
        
        structure_file = None
        data_file = None
        
        for root, dirs, files in os.walk(extract_dir):
            for file in files:
                if file == '01_structure.sql':
                    structure_file = os.path.join(root, file)
                elif file == '02_data.sql':
                    data_file = os.path.join(root, file)
        
        if not structure_file or not data_file:
            st.error("‚ùå No se encontraron los archivos SQL en el backup")
            shutil.rmtree(temp_dir)
            return
        
        st.success("‚úÖ Archivos SQL localizados")
        progress.progress(30)
        
        # Paso 3: Conectar a la base de datos
        status.text("üîå Conectando a PostgreSQL...")
        
        engine = create_engine(db_url, pool_pre_ping=True)
        
        st.success("‚úÖ Conexi√≥n establecida")
        progress.progress(40)
        
        # Paso 4: Eliminar datos actuales (si corresponde)
        if restore_option in ["Restauraci√≥n Completa (Recomendado)", "Solo Datos"]:
            status.text("üóëÔ∏è Eliminando datos actuales...")
            
            with engine.begin() as conn:
                # Desactivar foreign keys temporalmente
                conn.execute(text("SET session_replication_role = 'replica';"))
                
                # Orden inverso para respetar foreign keys
                tables = ['remito_items', 'remitos', 'articulos', 'rubros', 'clientes', 'vendedores']
                
                for table in tables:
                    try:
                        conn.execute(text(f"DELETE FROM {table};"))
                        st.success(f"‚úÖ Tabla {table} limpiada")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Error limpiando {table}: {str(e)}")
                
                conn.execute(text("SET session_replication_role = 'origin';"))
            
            progress.progress(50)
        
        # Paso 5: Restaurar estructura (si corresponde)
        if restore_option in ["Restauraci√≥n Completa (Recomendado)", "Solo Estructura"]:
            status.text("üèóÔ∏è Recreando estructura de tablas...")
            
            with open(structure_file, 'r', encoding='utf-8') as f:
                structure_sql = f.read()
            
            with engine.begin() as conn:
                # Eliminar tablas existentes primero
                conn.execute(text("""
                    DROP TABLE IF EXISTS remito_items CASCADE;
                    DROP TABLE IF EXISTS remitos CASCADE;
                    DROP TABLE IF EXISTS articulos CASCADE;
                    DROP TABLE IF EXISTS rubros CASCADE;
                    DROP TABLE IF EXISTS clientes CASCADE;
                    DROP TABLE IF EXISTS vendedores CASCADE;
                """))
                
                # Ejecutar comandos de estructura
                for cmd in structure_sql.split(';'):
                    if cmd.strip() and not cmd.strip().startswith('--'):
                        try:
                            conn.execute(text(cmd))
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è Warning en estructura: {str(e)}")
            
            st.success("‚úÖ Estructura recreada")
            progress.progress(70)
        
        # Paso 6: Restaurar datos
        if restore_option in ["Restauraci√≥n Completa (Recomendado)", "Solo Datos"]:
            status.text("üíæ Restaurando datos...")
            
            with open(data_file, 'r', encoding='utf-8') as f:
                data_sql = f.read()
            
            with engine.begin() as conn:
                # Ejecutar comandos de datos
                commands = data_sql.split(';')
                total_commands = len(commands)
                
                for i, cmd in enumerate(commands):
                    if cmd.strip() and not cmd.strip().startswith('--'):
                        try:
                            conn.execute(text(cmd))
                            if i % 10 == 0:  # Actualizar progreso cada 10 comandos
                                current_progress = 70 + int((i / total_commands) * 25)
                                progress.progress(current_progress)
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è Warning en datos: {str(e)[:100]}")
            
            st.success("‚úÖ Datos restaurados")
            progress.progress(95)
        
        # Paso 7: Verificaci√≥n final
        status.text("‚úÖ Verificando restauraci√≥n...")
        
        with engine.begin() as conn:
            tables = ['vendedores', 'clientes', 'rubros', 'articulos', 'remitos', 'remito_items']
            verification = []
            
            for table in tables:
                try:
                    count = conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
                    verification.append({
                        "Tabla": table.capitalize(),
                        "Registros": f"{count:,}",
                        "Estado": "‚úÖ OK"
                    })
                except Exception as e:
                    verification.append({
                        "Tabla": table.capitalize(),
                        "Registros": "Error",
                        "Estado": f"‚ùå {str(e)[:30]}"
                    })
            
            import pandas as pd
            df_verification = pd.DataFrame(verification)
        
        progress.progress(100)
        status.text("üéâ Restauraci√≥n completada!")
        
        # Mostrar resultados
        st.success("### üéâ ¬°Restauraci√≥n Completada Exitosamente!")
        
        st.markdown("### üìä Verificaci√≥n de Tablas:")
        st.dataframe(df_verification, use_container_width=True, hide_index=True)
        
        # Resumen
        total_records = sum(
            int(v['Registros'].replace(',', '')) 
            for v in verification 
            if v['Registros'] != 'Error'
        )
        
        col_a, col_b, col_c = st.columns(3)
        with col_a:
            st.metric("üìã Tablas Restauradas", len(verification))
        with col_b:
            st.metric("üíæ Registros Totales", f"{total_records:,}")
        with col_c:
            ok_tables = len([v for v in verification if v['Estado'] == '‚úÖ OK'])
            st.metric("‚úÖ Tablas OK", f"{ok_tables}/{len(verification)}")
        
        # Limpiar archivos temporales
        shutil.rmtree(temp_dir)
        
    except Exception as e:
        st.error(f"‚ùå Error durante la restauraci√≥n: {str(e)}")
        import traceback
        st.code(traceback.format_exc())
        
        # Intentar limpiar
        try:
            shutil.rmtree(temp_dir)
        except:
            pass

# Funci√≥n principal para el men√∫
def restore_backup():
    """Funci√≥n para llamar desde el men√∫ principal"""
    restore_backup_page()

if __name__ == "__main__":
    restore_backup()